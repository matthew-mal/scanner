# Generated by Django 5.1 on 2025-05-14 12:39

import core.models
import django.db.models.deletion
import django.utils.timezone
import guardian.mixins
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="NextStage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("signal", models.CharField(max_length=32)),
                ("display_name", models.CharField(max_length=64)),
            ],
            options={
                "verbose_name": "Next Stage",
                "verbose_name_plural": "Next Stages",
                "ordering": ["display_name"],
            },
        ),
        migrations.CreateModel(
            name="ReturnReason",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("defect", "Defect"),
                            ("wrong_design", "Wrong Design"),
                            ("chip", "Chip"),
                            ("color_mismatch", "Color Mismatch"),
                            ("other", "Other (Specify Below)"),
                        ],
                        default="defect",
                        max_length=32,
                        unique=True,
                    ),
                ),
                (
                    "custom_reason",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Stage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=32, unique=True)),
                (
                    "barcode",
                    models.CharField(
                        db_index=True, max_length=50, null=True, unique=True
                    ),
                ),
                ("display_name", models.CharField(max_length=64)),
                ("note", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Stage",
                "verbose_name_plural": "Stages",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=30, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False, verbose_name="Can visit admin panel"
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[("employee", "Employee"), ("manager", "Manager")],
                        default="employee",
                        max_length=40,
                    ),
                ),
                (
                    "barcode",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Unique bar code",
                        max_length=50,
                        null=True,
                        unique=True,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Employee",
                "verbose_name_plural": "Employees",
                "ordering": ["id"],
                "unique_together": {("email",)},
            },
            bases=(models.Model, guardian.mixins.GuardianUserMixin),
            managers=[
                ("objects", core.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Case",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("case_number", models.CharField(max_length=100, unique=True)),
                (
                    "barcode",
                    models.CharField(
                        db_index=True, max_length=50, null=True, unique=True
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[("standard", "STANDARD"), ("urgent", "URGENT")],
                        default="standard",
                        max_length=10,
                    ),
                ),
                (
                    "material",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("zr", "Zirconium"),
                            ("pmma", "PMMA"),
                            ("emax", "EMAX"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("shade", models.CharField(blank=True, max_length=50, null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                ("is_returned", models.BooleanField(default=False)),
                ("return_description", models.TextField(blank=True, null=True)),
                (
                    "last_updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="cases_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "next_state_intent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="core.nextstage",
                    ),
                ),
                (
                    "return_reason",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="cases",
                        to="core.returnreason",
                    ),
                ),
                (
                    "current_stage",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="core.stage"
                    ),
                ),
            ],
            options={
                "verbose_name": "Case",
                "verbose_name_plural": "Cases",
                "ordering": ["-created_at"],
                "permissions": [
                    (
                        "view_case_processing_all_cases",
                        "Can view all cases for processing",
                    ),
                    ("manage_case", "Can manage a specific case"),
                    ("archive_cases", "Can archive a specific case"),
                    ("return_cases", "Can return a specific case"),
                ],
            },
        ),
        migrations.AddField(
            model_name="nextstage",
            name="current",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="current_state",
                to="core.stage",
            ),
        ),
        migrations.AddField(
            model_name="nextstage",
            name="next",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="next_state",
                to="core.stage",
            ),
        ),
        migrations.CreateModel(
            name="CaseStageLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start_time", models.DateTimeField(default=django.utils.timezone.now)),
                ("end_time", models.DateTimeField(blank=True, null=True)),
                ("reason", models.TextField(blank=True, null=True)),
                ("is_returned", models.BooleanField(default=False)),
                (
                    "case",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="stage_logs_case",
                        to="core.case",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="stage_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "stage",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="stage_logs_stage",
                        to="core.stage",
                    ),
                ),
            ],
            options={
                "verbose_name": "Case Stage Log",
                "verbose_name_plural": "Case Stage Logs",
                "ordering": ["-start_time"],
            },
        ),
    ]
